#
# Workflow name won't accept context expressions, such as ${{ github.run_number }}.
#
# Moreover, Actions UI confuses workflow names in different branches and while the
# name will be evaluated properly during the run (e.g. if ${{ github.workflow }}
# is used), the name of the running workflow will replace *all* run names in
# Actions UI, even for different branches, where workflow name is different. This
# makes it impossible to distinguish multiple runs without clicking on them, which
# would show the proper run name.
#
name: build cpp

env:
  #
  # These version variables are half-measures for tracking build numbers and
  # won't work as well as Azure pipeline names and counters. If this workflow
  # file is reused between branches, build numbers will not be sequential.
  # The only way to track proper build numbers in GitHub is to have different
  # workflow files, which is really messy because those in branches are not
  # interpreted well when showing run names (see comment above `name`).
  #
  VERSION: 1.1.0
  BUILD_NUMBER: ${{ github.run_number }}

# manual and REST API runs only
on: workflow_dispatch

jobs:
  build:
    name: Build ./cpp
    runs-on: ubuntu-latest
    
    steps:
    # checkout the latest source
    - name: Checkout
      uses: actions/checkout@v2

    # use a local action that builds a Debian container and runs `make` in it
    - name: Make ./cpp
      uses: ./.github/workflows/debian-build
      with:
        build_number: ${{ env.BUILD_NUMBER }}

    # run the app to make sure it was built
    - name: test ./cpp
      run: ./cpp

    #
    # Use a local action to package build output as a tar/gzip artifact with
    # the application version and build number in the archive name.
    #
    - name: Archive ./cpp
      uses: ./.github/workflows/alpine-archive
      with:
        tar_gz_name: hello-world-${{ env.VERSION }}+${{ env.BUILD_NUMBER }}.tar.gz
        file_or_dir_path: ./cpp
    
    # upload the artifact under the `hello-world` name
    - name: Upload ./cpp artifact
      uses: actions/upload-artifact@v2.2.1
      with:
        name: hello-world
        path: hello-world-${{ env.VERSION }}+${{ env.BUILD_NUMBER }}.tar.gz

  release:
    name: Create a draft release for ./cpp
    needs: build
    runs-on: ubuntu-latest

    steps:
    # create a draft GitHub release
    - name: Create a draft release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: v${{ env.VERSION }}
        draft: true

    # download the artifact that was built in the `build` job in this workflow
    - name: Download artifact hello-world
      uses: actions/download-artifact@v2.0.7
      with:
        name: hello-world
        path: .

    # upload the build artifact as a draft release asset
    - name: Upload a Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # use the upload URL from the step that created a release
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./hello-world-${{ env.VERSION }}+${{ env.BUILD_NUMBER }}.tar.gz
        asset_name: 'hello world-${{ env.VERSION }}+${{ env.BUILD_NUMBER }}.tar.gz'
        asset_content_type: application/tar+gzip
